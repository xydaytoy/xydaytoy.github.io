<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线性规划_GLPK工具</title>
    <url>/2021/11/27/LP-GLPK/</url>
    <content><![CDATA[<blockquote>
<p>线性规划求解工具GLPK在windows环境下的安装和使用样例。</p>
</blockquote>
<span id="more"></span>

<p>记录一个GLPK工具无需VS编译，直接增加系统路径的方法，简单好用。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.从link<a href="https://sourceforge.net/projects/winglpk/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://sourceforge.net/projects/winglpk/下载安装包。</a><br>2.下载好之后将安装包解压，并将其复制到C盘下。<br>3.进入C:\glpk-4.65\w64或者C:\glpk-4.65\w32，根据自己电脑的系统类型选择打开64位的还是32位的。（查看电脑系统类型的操作：控制面板–系统和安全–系统）<br>4.打开控制面板–系统和安全–系统–高级系统设置-环境变量：编辑系统变量中的Path，将路径C:\glpk-4.65\w64加入Path中。<br>5.检验安装是否成功：在C:\glpk-4.65\w64文件夹下，路径中输入cmd打开命令行窗口，输入glpsol回车，显示版本信息则说明安装成功。</p>
<h1 id="输入文件-input-mod"><a href="#输入文件-input-mod" class="headerlink" title="输入文件:input.mod"></a>输入文件:input.mod</h1><p>var x1;<br>var x2;<br>var x3;<br>//var x4 binary;布尔变量binary，类似的还有整数integer。</p>
<p>maximize z: 10 * x1 + 8 * x2 + 16 * x3;</p>
<p>s.t. con1 : 3 * x1 + 3 * x2 + 2 * x3 &lt;= 200;<br>s.t. con2 : 4 * x1 + 3 * x2 + 7 * x3 &lt;= 300;<br>s.t. con3 : -x1 &lt;= 0;<br>s.t. con4 : -x2 &lt;= 0;<br>s.t. con5 : -x3 &lt;= 0;<br>end;</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>glpsol -m input.mod -o output.sol 　<br>-m filename: 指定描述问题的文件<br>-o filename: 指定输出结果保存在哪个文件</p>
<h1 id="输出-output-sol"><a href="#输出-output-sol" class="headerlink" title="输出:output.sol"></a>输出:output.sol</h1><p>Problem:    input<br>Rows:       6<br>Columns:    3<br>Non-zeros:  12<br>Status:     OPTIMAL<br>Objective:  z = 746.6666667 (MAXimum)</p>
<p>   No.   Row name   St   Activity     Lower bound   Upper bound    Marginal</p>
<hr>
<pre><code> 1 z            B        746.667                             
 2 con1         NU           200                         200      0.533333 
 3 con2         NU           300                         300       2.13333 
 4 con3         NU             0                          -0      0.133333 
 5 con4         B       -53.3333                          -0 
 6 con5         B            -20                          -0 
</code></pre>
<p>   No. Column name  St   Activity     Lower bound   Upper bound    Marginal</p>
<hr>
<pre><code> 1 x1           B              0                             
 2 x2           B        53.3333                             
 3 x3           B             20                             
</code></pre>
<p>Karush-Kuhn-Tucker optimality conditions:</p>
<p>KKT.PE: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>KKT.PB: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>KKT.DE: max.abs.err = 1.78e-15 on column 1<br>        max.rel.err = 8.35e-17 on column 1<br>        High quality</p>
<p>KKT.DB: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>End of output</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_42848399/article/details/91654118">https://blog.csdn.net/weixin_42848399/article/details/91654118</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>github博客常用命令</title>
    <url>/2021/05/27/blog-instructions/</url>
    <content><![CDATA[<blockquote>
<p>汇总一些博客常用命令和备份博客的方法。</p>
</blockquote>
<span id="more"></span>

<h1 id="新建："><a href="#新建：" class="headerlink" title="新建："></a>新建：</h1><p><code>hexo init [folder]</code><br>新建网站，有folder就新建一个名为folder的文件夹并将网站存在该文件夹下，没有folder就将网站存在当前目录下。</p>
<p><code>hexo new [layout] “title”</code><br>新建文章，如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替，文章标题用双引号括起来。</p>
<h1 id="部署更改"><a href="#部署更改" class="headerlink" title="部署更改:"></a>部署更改:</h1><p><code>hexo clean</code><br>清除缓存文件(db.json)和已生成的静态文件(public)，当更改不生效时可以使用该命令。</p>
<p><code>hexo g / hexo generate</code><br>生成静态文件，之后可启动服务器或者部署网站。</p>
<p><code>hexo s / hexo server</code><br>启动服务器，可访问<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E3%80%82">http://localhost:4000/查看。</a></p>
<p><code>hexo d / hexo deploy</code><br>部署网站，可访问网站链接查看。</p>
<h1 id="上传文件："><a href="#上传文件：" class="headerlink" title="上传文件："></a>上传文件：</h1><p>在github上code下载处复制<a href="https://github.com/xxx.git">https://github.com/xxx.git</a> 的链接，<br>在本地git bash中输入<code>git clone https://github.com/xxx.git</code> 克隆仓库到本地，<br>将需要上传的文件复制到本地生成的文件夹中，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . #将文件夹下的所有文件都添加进来</span><br><span class="line">git commit  -m  &quot;first commit&quot;  #“first commit”可替换成任意需要的注释信息</span><br><span class="line">git push -u origin main  #将本地仓库push到github上面，2020年10月1日之后，github新创建的仓库默认分支都将使用main，而不是之前的master，要注意。</span><br></pre></td></tr></table></figure>

<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>采用同上传文件的方式来备份网站源文件，在github上建立一个private仓库，将网站的文件夹整体移动到克隆到本地的备份文件夹中，每隔一段时间上传最新的文件来备份网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit  -m  &quot;backup&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>other</category>
        <category>github</category>
      </categories>
  </entry>
  <entry>
    <title>fairseq代码位置记录</title>
    <url>/2021/05/21/fairseq-tips/</url>
    <content><![CDATA[<blockquote>
<p>记录一些fairseq中功能实现的代码位置。<br>fairseq版本: 0.9.0</p>
</blockquote>
<span id="more"></span>

<h1 id="ensemble集成"><a href="#ensemble集成" class="headerlink" title="ensemble集成"></a>ensemble集成</h1><p>在fairseq/sequence_generator.py中760行，ensemble在beam search之前。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
        <category>fairseq</category>
      </categories>
  </entry>
  <entry>
    <title>fairseq踩坑记录</title>
    <url>/2021/05/27/fairseq-tips1/</url>
    <content><![CDATA[<blockquote>
<p>记录一些fairseq中遇到的bug和解决方案。<br>fairseq版本: 0.9.0</p>
</blockquote>
<span id="more"></span>

<h1 id="torch-max返回值"><a href="#torch-max返回值" class="headerlink" title="torch.max返回值"></a>torch.max返回值</h1><p>报错：<code>TypeError: expected Tensor as element 0 in argument 0, but got torch.return_types.max</code></p>
<p>原因是torch.max(a, dim=)返回值是tuple类型，第一个元素是值，第二个元素是索引，因此只需要返回值的tensor时，torch.max(a, dim=).values即可</p>
<h1 id="导致维度变化的命令"><a href="#导致维度变化的命令" class="headerlink" title="导致维度变化的命令"></a>导致维度变化的命令</h1><p>torch.max=tf.reduce_sum，都会使维度减一</p>
<p>a = a[:-1:] 也会使维度减一</p>
<p>cat维度不变，stack使维度加一，都是tensor拼接的功能</p>
<h1 id="cpu和gpu上变量的类型不匹配问题"><a href="#cpu和gpu上变量的类型不匹配问题" class="headerlink" title="cpu和gpu上变量的类型不匹配问题"></a>cpu和gpu上变量的类型不匹配问题</h1><p>报错：RuntimeError: expected device cpu but got device cuda:0</p>
<p>可能出现错误的位置：</p>
<ul>
<li><p>等号左边和右边类型不一样</p>
</li>
<li><p>运算符左右两端类型不同，例：+ - * /</p>
</li>
<li><p>同一个函数内，传入参数的类型不同，例matmul等</p>
</li>
</ul>
<p>把tensor转移到相同的设备上解决问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-&gt;cuda : data.cuda()</span><br><span class="line">-&gt;cpu: data.cpu()</span><br><span class="line">-&gt;numpy：</span><br><span class="line">cuda类型不能直接转numpy 须先转成cpu类型，data.cpu().numpy()</span><br><span class="line">在cuda下训练中的数据不能直接转换为numpy，data.cpu().detach().numpy()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考: <a href="https://blog.csdn.net/qq_41368074/article/details/105942534">https://blog.csdn.net/qq_41368074/article/details/105942534</a></p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
        <category>fairseq</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-next框架附加功能</title>
    <url>/2021/05/27/hexo-next-tips/</url>
    <content><![CDATA[<blockquote>
<p>hexo+next框架博客的一些附加功能记录。<br>hexo: 5.4.0<br>next: 7.8.0</p>
</blockquote>
<span id="more"></span>

<h1 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h1><p>hexo和next版本信息可在相应文件夹的package.json中搜索version查看。</p>
<h1 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明:"></a>版权声明:</h1><p>在.\themes\next\layout_macro\目录下，新建my-copyright.swig文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;clipboard.js&#x2F;1.5.10&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;jquery-1.7.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;sweetalert.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;sweetalert.mini.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;&#x2F;span&gt;&#123;&#123; page.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文作者:&lt;&#x2F;span&gt;xxx&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文链接:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;copy-path&quot;  title&#x3D;&quot;点击复制文章链接&quot;&gt;&lt;i class&#x3D;&quot;fa fa-clipboard&quot; data-clipboard-text&#x3D;&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label&#x3D;&quot;复制成功！&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;版权声明:&lt;&#x2F;span&gt;本博客所有文章除特别声明外，均采用&lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;CC BY-NC-ND&lt;&#x2F;a&gt;许可协议。转载请注明出处！&lt;&#x2F;p&gt;  </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard &#x3D; new Clipboard(&#39;.fa-clipboard&#39;);</span><br><span class="line">    clipboard.on(&#39;success&#39;, $(function()&#123;</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#39;复制成功&#39;,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: 500,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\layout_macro\post.swig文件，在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br></pre></td></tr></table></figure>
<p>之后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--添加版权信息--&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;my-copyright.swig&#39; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在.\themes\next\source\css_common\components\post\目录下，新建my-post-copyright.styl文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #333333; &#x2F;&#x2F; title color</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #0593d3; &#x2F;&#x2F; link color</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\source\css_common\components\post\post.styl文件，在最后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>

<p>打开.\scaffolds\post.md文件，设置新文件开启版权声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">copyright: true #开启</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/u011236348/article/details/88169271">https://blog.csdn.net/u011236348/article/details/88169271</a></p>
</blockquote>
<h1 id="访客-阅读量统计"><a href="#访客-阅读量统计" class="headerlink" title="访客/阅读量统计"></a>访客/阅读量统计</h1><p>打开.\themes\next_config.yml文件，<br>搜索busuanzi_count关键字，把enable设置为true，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi.</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true #访客数</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true #访问数</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true #文章阅读量</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>
<p>同一文件，搜索footer关键字，在其底下添加counter，设值为true。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2015</span><br><span class="line">  # count for visit</span><br><span class="line">  counter: true</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\layout_partials\footer.swig文件，添加代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>访客、访问次数在网站主页底部，文章阅读量在文章开头。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">https://blog.csdn.net/baidu_34310405/article/details/102665373</a></p>
</blockquote>
<h1 id="博客中插入自己编写的html页面"><a href="#博客中插入自己编写的html页面" class="headerlink" title="博客中插入自己编写的html页面"></a>博客中插入自己编写的html页面</h1><p>看到next官方readme中LEAFERx博客sentence页面很好看，也动手搞一个类似的。利用jQuery的全屏滚动插件fullPage.js实现，网页部分主要参考链接中的代码。</p>
<p>将自己的html页面插入博客中，首先新建一个页面<code>hexo new page &quot;schedule&quot;</code>，在生成的文件夹source/schedule/下复制网页的css/js/html文件。</p>
<p>修改根目录下的<code>_config.yml</code>文件，跳过自定义页面的渲染过程，若文件夹下有子文件夹，需要改为<code>schedule/**</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - &quot;schedule&#x2F;*&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://www.dowebok.com/77.html">https://www.dowebok.com/77.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
        <category>hexo</category>
        <category>next</category>
      </categories>
  </entry>
  <entry>
    <title>DC分治</title>
    <url>/2021/10/15/oj-DC/</url>
    <content><![CDATA[<blockquote>
<p>算法课笔记-分治<br>语言：C++</p>
</blockquote>
<span id="more"></span>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>内容。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>oj</category>
      </categories>
  </entry>
  <entry>
    <title>python笔记</title>
    <url>/2021/05/31/python-note/</url>
    <content><![CDATA[<blockquote>
<p>python3的一些知识点</p>
</blockquote>
<span id="more"></span>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li><p>函数中的默认参数必须指向不变对象，否则在多次调用时会改变默认值（例如None、str，反例如list）。</p>
</li>
<li><p>可变参数：允许不定量个参数输入，在参数前加<em>，传入参数类型是tuple。<br>在输入list/tuple进入可变参数的函数时，可以加上</em>直接传入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(*num):</span><br><span class="line">    pass</span><br><span class="line">a &#x3D; (1,2,3)</span><br><span class="line">func(*a)</span><br></pre></td></tr></table></figure></li>
<li><p>关键字参数：**来表示，用法同可变参数，区别是传入的参数都为<code>x=y</code>格式，传入后变成一个关键字为x，值为y的字典。<br>可以用作用户可选输入的收集上。</p>
</li>
<li><p>命名关键字参数：用<em>或者可变参数</em>x做分隔符，规定必须输入的关键字参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(x,y,*,z):</span><br><span class="line">    pass</span><br><span class="line">func(1,2,z&#x3D;4)</span><br></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1></li>
<li><p>左闭右开取值，第三个参数表示间隔</p>
</li>
</ul>
<h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><ul>
<li>字典的迭代默认是key，迭代value:<code>for value in d.values()</code>，<br>同时迭代key和value:<code>for k, v in d.items()</code></li>
</ul>
<h1 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a>生成器generator</h1><ul>
<li><p>把生成式列表的[]改为()，每次调用next(x)计算下一个元素的值，或者用for循环迭代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g &#x3D; (x*x for x in range(0,10))</span><br><span class="line">a &#x3D; next(g)</span><br><span class="line">for i in g:</span><br><span class="line">	print(i)</span><br></pre></td></tr></table></figure></li>
<li><p>在函数中添加yield语句，每次调用<code>next()</code>，运行到yield返回，下次调用从yield下继续</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def odd():</span><br><span class="line">	print(&quot;step 1&quot;)</span><br><span class="line">	yield 1</span><br><span class="line">	print(&quot;step 2&quot;)</span><br><span class="line">	yield 3</span><br><span class="line">	print(&quot;step 3&quot;)</span><br><span class="line">	yield 5</span><br><span class="line">o &#x3D; odd()</span><br><span class="line">a &#x3D; next(o) #step 2\n3</span><br></pre></td></tr></table></figure>

<ul>
<li>这里要注意for循环调用函数生成器时，函数内的print内容无法输出，可以通过<code>StopIteration</code>错误的value获取。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in o:</span><br><span class="line">	print(i) #1 3 5</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		x &#x3D; next(o)</span><br><span class="line">		print(x)</span><br><span class="line">	except StopIteration as e:</span><br><span class="line">		print(e.value)</span><br><span class="line">		break</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><ul>
<li>判断对象是不是<code>Iterable</code>对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterable</span><br><span class="line">isinstance([], Iterable) # True</span><br></pre></td></tr></table></figure>

<ul>
<li>可以被<code>next()</code>不断调用并返回下一个值的对象称为迭代器<code>Iterator</code>对象，生成器都是<code>Iterator</code>对象，但是<code>Iterable</code>对象不全是<code>Iterator</code>对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterator</span><br><span class="line">isinstance([],Iterator) # False</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Iterable</code>对象可以通过使用<code>iter()</code>函数变成<code>Iterator</code>对象，两者的区别是后者是惰性的，可以是无限长度的序列流，无法提前知道长度，前者是有限的，长度可知的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(iter([]), Iterator) # True</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>函数式编程的一个特点：允许把函数本身作为参数传入另一个函数，还允许返回一个函数。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul>
<li>接收另一个函数作为参数的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(x, y, f):</span><br><span class="line">	return f(x) + f(y)</span><br></pre></td></tr></table></figure>

<ul>
<li>map()：接收两个参数，一个函数，一个<code>Iterable</code>对象，对每个对象实施函数，返回结果是一个<code>Iterator</code>对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">	return x*x</span><br><span class="line">r &#x3D; map(f, [1,2,3,4,5,6])</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce()：接收两个参数，一个函数和一个序列，功能是把结果继续和序列的下一个元素做累积计算。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#str2int功能实现</span><br><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">	return x * 10 + y</span><br><span class="line">def char2num(s):</span><br><span class="line">	digits &#x3D; &#123;&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9&#125;</span><br><span class="line">	return digits[s]</span><br><span class="line">reduce(fn, map(char2num, &#39;13579&#39;)) # 13579</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#利用map和reduce编写一个str2float函数，把字符串&#39;123.456&#39;转换成浮点数123.456</span><br><span class="line">def str2float(s):</span><br><span class="line">    def ten(x, y):</span><br><span class="line">        return x*10+y</span><br><span class="line">    def st(x):</span><br><span class="line">        D &#x3D; &#123;&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9&#125;</span><br><span class="line">        return D[x]</span><br><span class="line">    a, b &#x3D; s.split(&#39;.&#39;)</span><br><span class="line">    num &#x3D; len(b)</span><br><span class="line">    ans1 &#x3D; reduce(ten, list(map(st, a)))</span><br><span class="line">    ans2 &#x3D; reduce(ten, list(map(st, b)))</span><br><span class="line">    ans &#x3D; ans1 +ans2&#x2F;(10**num)</span><br><span class="line">    return ans</span><br><span class="line">	</span><br><span class="line">print(&#39;str2float(\&#39;123.456\&#39;) &#x3D;&#39;, str2float(&#39;123.456&#39;))</span><br><span class="line">if abs(str2float(&#39;123.456&#39;) - 123.456) &lt; 0.00001:</span><br><span class="line">    print(&#39;测试成功!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;测试失败!&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>filter():接收两个参数，一个函数，一个序列，根据函数的True/False来决定序列是否保留，返回值是一个<code>Iterator</code>对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def not_empty(s):</span><br><span class="line">    return s and s.strip()</span><br><span class="line">x &#x3D; list(filter(not_empty, [&#39;A&#39;, &#39;&#39;, &#39;B&#39;, None, &#39;C&#39;, &#39;  &#39;])) # [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>DP动态规划</title>
    <url>/2021/10/15/oj-DP/</url>
    <content><![CDATA[<blockquote>
<p>算法课笔记-动态规划<br>语言: C++</p>
</blockquote>
<span id="more"></span>

<h1 id="中文标题"><a href="#中文标题" class="headerlink" title="中文标题"></a>中文标题</h1><p>内容。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>oj</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch笔记</title>
    <url>/2021/05/28/pytorch-note/</url>
    <content><![CDATA[<blockquote>
<p>pytorch-动手学深度学习2021笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p><code>[1,:]</code>其中:表示选择范围，只有:表示全选，与数字结合表示范围。</p>
<p><code>[::3,::2]</code>其中::表示跳选，每隔x个选择一个。</p>
<p>张量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; torch.arange(12) #生成</span><br><span class="line">x.shape #形状</span><br><span class="line">x.numel() #元素总数</span><br><span class="line">x &#x3D; x.reshape(3,4) #变换</span><br><span class="line">x &#x3D; torch.zeros((1,2,3)) #全零</span><br><span class="line">x &#x3D; torch.ones((2,3,4)) #全一</span><br><span class="line">x &#x3D; torch.tensor(list) #根据list生成tensor</span><br><span class="line">+ - * &#x2F; ** #对元素进行运算</span><br><span class="line">torch.exp(x) #指数运算</span><br><span class="line">torch.cat((x,y),dim&#x3D;0) #在第零维拼接，零维是最外侧</span><br><span class="line">x &#x3D;&#x3D; y #构建二元张量，是元素比较的结果</span><br><span class="line">x.sum() #求和，结果是一个元素的tensor</span><br><span class="line">x[0:2,:]&#x3D;12 #区域赋值</span><br><span class="line">x[:]&#x3D;x+y &#x2F; x+&#x3D;y #减少内存开销，前后不变</span><br><span class="line">y &#x3D; x.numpy() #tensor转ndarray</span><br><span class="line">x &#x3D; torch.tensor(y) #ndarray转tensor</span><br><span class="line">x.item() &#x2F; float(x) &#x2F; int(x) #0维张量转标量</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
      </categories>
  </entry>
  <entry>
    <title>tf-tensor变换</title>
    <url>/2021/05/27/tf-tensor-conversion/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow中tensor变换的函数汇总。</p>
</blockquote>
<span id="more"></span>

<p><code>tf.stack</code><br>list-&gt;tensor<br>（tf.convert_to_tensor）</p>
<p><code>tf.unstack</code><br>tensor-&gt;list</p>
<p><code>tf.expand_dims</code><br>扩展维度</p>
<p><code>reduce_sum/max/mean</code><br>减少维度</p>
<p><code>tf.reshape</code><br>改变各维度大小（可增加减少维度）</p>
<p><code>tf.transpose</code><br>调换维度顺序</p>
<p><code>tf.tile</code><br>不改变维度的复制</p>
<p><code>tf.concat</code><br>不改变维度的拼接</p>
<p><code>tf.broadcast_to</code><br>广播</p>
]]></content>
      <categories>
        <category>code</category>
        <category>tensorflow</category>
      </categories>
  </entry>
</search>
