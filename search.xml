<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线性规划_GLPK工具</title>
    <url>/2021/11/27/LP-GLPK/</url>
    <content><![CDATA[<blockquote>
<p>线性规划求解工具GLPK在windows环境下的安装和使用样例。</p>
</blockquote>
<span id="more"></span>

<p>记录一个GLPK工具无需VS编译，直接增加系统路径的方法，简单好用。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.从link<a href="https://sourceforge.net/projects/winglpk/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://sourceforge.net/projects/winglpk/下载安装包。</a><br>2.下载好之后将安装包解压，并将其复制到C盘下。<br>3.进入C:\glpk-4.65\w64或者C:\glpk-4.65\w32，根据自己电脑的系统类型选择打开64位的还是32位的。（查看电脑系统类型的操作：控制面板–系统和安全–系统）<br>4.打开控制面板–系统和安全–系统–高级系统设置-环境变量：编辑系统变量中的Path，将路径C:\glpk-4.65\w64加入Path中。<br>5.检验安装是否成功：在C:\glpk-4.65\w64文件夹下，路径中输入cmd打开命令行窗口，输入glpsol回车，显示版本信息则说明安装成功。</p>
<h1 id="输入文件-input-mod"><a href="#输入文件-input-mod" class="headerlink" title="输入文件:input.mod"></a>输入文件:input.mod</h1><p>var x1;<br>var x2;<br>var x3;<br>//var x4 binary;布尔变量binary，类似的还有整数integer。</p>
<p>maximize z: 10 * x1 + 8 * x2 + 16 * x3;</p>
<p>s.t. con1 : 3 * x1 + 3 * x2 + 2 * x3 &lt;= 200;<br>s.t. con2 : 4 * x1 + 3 * x2 + 7 * x3 &lt;= 300;<br>s.t. con3 : -x1 &lt;= 0;<br>s.t. con4 : -x2 &lt;= 0;<br>s.t. con5 : -x3 &lt;= 0;<br>end;</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>glpsol -m input.mod -o output.sol 　<br>-m filename: 指定描述问题的文件<br>-o filename: 指定输出结果保存在哪个文件</p>
<h1 id="输出-output-sol"><a href="#输出-output-sol" class="headerlink" title="输出:output.sol"></a>输出:output.sol</h1><p>Problem:    input<br>Rows:       6<br>Columns:    3<br>Non-zeros:  12<br>Status:     OPTIMAL<br>Objective:  z = 746.6666667 (MAXimum)</p>
<p>   No.   Row name   St   Activity     Lower bound   Upper bound    Marginal</p>
<hr>
<pre><code> 1 z            B        746.667                             
 2 con1         NU           200                         200      0.533333 
 3 con2         NU           300                         300       2.13333 
 4 con3         NU             0                          -0      0.133333 
 5 con4         B       -53.3333                          -0 
 6 con5         B            -20                          -0 
</code></pre>
<p>   No. Column name  St   Activity     Lower bound   Upper bound    Marginal</p>
<hr>
<pre><code> 1 x1           B              0                             
 2 x2           B        53.3333                             
 3 x3           B             20                             
</code></pre>
<p>Karush-Kuhn-Tucker optimality conditions:</p>
<p>KKT.PE: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>KKT.PB: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>KKT.DE: max.abs.err = 1.78e-15 on column 1<br>        max.rel.err = 8.35e-17 on column 1<br>        High quality</p>
<p>KKT.DB: max.abs.err = 0.00e+00 on row 0<br>        max.rel.err = 0.00e+00 on row 0<br>        High quality</p>
<p>End of output</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_42848399/article/details/91654118">https://blog.csdn.net/weixin_42848399/article/details/91654118</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>github博客常用命令</title>
    <url>/2021/05/27/blog-instructions/</url>
    <content><![CDATA[<blockquote>
<p>汇总一些博客常用命令和备份博客的方法。</p>
</blockquote>
<span id="more"></span>

<h1 id="新建："><a href="#新建：" class="headerlink" title="新建："></a>新建：</h1><p><code>hexo init [folder]</code><br>新建网站，有folder就新建一个名为folder的文件夹并将网站存在该文件夹下，没有folder就将网站存在当前目录下。</p>
<p><code>hexo new [layout] “title”</code><br>新建文章，如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替，文章标题用双引号括起来。</p>
<h1 id="部署更改"><a href="#部署更改" class="headerlink" title="部署更改:"></a>部署更改:</h1><p><code>hexo clean</code><br>清除缓存文件(db.json)和已生成的静态文件(public)，当更改不生效时可以使用该命令。</p>
<p><code>hexo g / hexo generate</code><br>生成静态文件，之后可启动服务器或者部署网站。</p>
<p><code>hexo s / hexo server</code><br>启动服务器，可访问<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E3%80%82">http://localhost:4000/查看。</a></p>
<p><code>hexo d / hexo deploy</code><br>部署网站，可访问网站链接查看。</p>
<h1 id="上传文件："><a href="#上传文件：" class="headerlink" title="上传文件："></a>上传文件：</h1><p>在github上code下载处复制<a href="https://github.com/xxx.git">https://github.com/xxx.git</a> 的链接，<br>在本地git bash中输入<code>git clone https://github.com/xxx.git</code> 克隆仓库到本地，<br>将需要上传的文件复制到本地生成的文件夹中，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add . #将文件夹下的所有文件都添加进来</span><br><span class="line">git commit  -m  &quot;first commit&quot;  #“first commit”可替换成任意需要的注释信息</span><br><span class="line">git push -u origin main  #将本地仓库push到github上面，2020年10月1日之后，github新创建的仓库默认分支都将使用main，而不是之前的master，要注意。</span><br></pre></td></tr></table></figure>

<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>采用同上传文件的方式来备份网站源文件，在github上建立一个private仓库，将网站的文件夹整体移动到克隆到本地的备份文件夹中，每隔一段时间上传最新的文件来备份网站。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit  -m  &quot;backup&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>other</category>
        <category>github</category>
      </categories>
  </entry>
  <entry>
    <title>fairseq代码位置记录</title>
    <url>/2021/05/21/fairseq-tips/</url>
    <content><![CDATA[<blockquote>
<p>记录一些fairseq中功能实现的代码位置。<br>fairseq版本: 0.9.0</p>
</blockquote>
<span id="more"></span>

<h1 id="ensemble集成"><a href="#ensemble集成" class="headerlink" title="ensemble集成"></a>ensemble集成</h1><p>在fairseq/sequence_generator.py中760行，ensemble在beam search之前。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
        <category>fairseq</category>
      </categories>
  </entry>
  <entry>
    <title>fairseq踩坑记录</title>
    <url>/2021/05/27/fairseq-tips1/</url>
    <content><![CDATA[<blockquote>
<p>记录一些fairseq中遇到的bug和解决方案。<br>fairseq版本: 0.9.0</p>
</blockquote>
<span id="more"></span>

<h1 id="torch-max返回值"><a href="#torch-max返回值" class="headerlink" title="torch.max返回值"></a>torch.max返回值</h1><p>报错：<code>TypeError: expected Tensor as element 0 in argument 0, but got torch.return_types.max</code></p>
<p>原因是torch.max(a, dim=)返回值是tuple类型，第一个元素是值，第二个元素是索引，因此只需要返回值的tensor时，torch.max(a, dim=).values即可</p>
<h1 id="导致维度变化的命令"><a href="#导致维度变化的命令" class="headerlink" title="导致维度变化的命令"></a>导致维度变化的命令</h1><p>torch.max=tf.reduce_sum，都会使维度减一</p>
<p>a = a[:-1:] 也会使维度减一</p>
<p>cat维度不变，stack使维度加一，都是tensor拼接的功能</p>
<h1 id="cpu和gpu上变量的类型不匹配问题"><a href="#cpu和gpu上变量的类型不匹配问题" class="headerlink" title="cpu和gpu上变量的类型不匹配问题"></a>cpu和gpu上变量的类型不匹配问题</h1><p>报错：RuntimeError: expected device cpu but got device cuda:0</p>
<p>可能出现错误的位置：</p>
<ul>
<li><p>等号左边和右边类型不一样</p>
</li>
<li><p>运算符左右两端类型不同，例：+ - * /</p>
</li>
<li><p>同一个函数内，传入参数的类型不同，例matmul等</p>
</li>
</ul>
<p>把tensor转移到相同的设备上解决问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-&gt;cuda : data.cuda()</span><br><span class="line">-&gt;cpu: data.cpu()</span><br><span class="line">-&gt;numpy：</span><br><span class="line">cuda类型不能直接转numpy 须先转成cpu类型，data.cpu().numpy()</span><br><span class="line">在cuda下训练中的数据不能直接转换为numpy，data.cpu().detach().numpy()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考: <a href="https://blog.csdn.net/qq_41368074/article/details/105942534">https://blog.csdn.net/qq_41368074/article/details/105942534</a></p>
</blockquote>
]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
        <category>fairseq</category>
      </categories>
  </entry>
  <entry>
    <title>hexo-next框架附加功能</title>
    <url>/2021/05/27/hexo-next-tips/</url>
    <content><![CDATA[<blockquote>
<p>hexo+next框架博客的一些附加功能记录。<br>hexo: 5.4.0<br>next: 7.8.0</p>
</blockquote>
<span id="more"></span>

<h1 id="版本信息："><a href="#版本信息：" class="headerlink" title="版本信息："></a>版本信息：</h1><p>hexo和next版本信息可在相应文件夹的package.json中搜索version查看。</p>
<h1 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明:"></a>版权声明:</h1><p>在.\themes\next\layout_macro\目录下，新建my-copyright.swig文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;clipboard.js&#x2F;1.5.10&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;jquery-1.7.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;sweetalert.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;http:&#x2F;&#x2F;jslibs.wuxubj.cn&#x2F;sweetalert_mini&#x2F;sweetalert.mini.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;&#x2F;span&gt;&#123;&#123; page.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文作者:&lt;&#x2F;span&gt;xxx&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文链接:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;copy-path&quot;  title&#x3D;&quot;点击复制文章链接&quot;&gt;&lt;i class&#x3D;&quot;fa fa-clipboard&quot; data-clipboard-text&#x3D;&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label&#x3D;&quot;复制成功！&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;版权声明:&lt;&#x2F;span&gt;本博客所有文章除特别声明外，均采用&lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;CC BY-NC-ND&lt;&#x2F;a&gt;许可协议。转载请注明出处！&lt;&#x2F;p&gt;  </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard &#x3D; new Clipboard(&#39;.fa-clipboard&#39;);</span><br><span class="line">    clipboard.on(&#39;success&#39;, $(function()&#123;</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#39;复制成功&#39;,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: 500,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\layout_macro\post.swig文件，在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br></pre></td></tr></table></figure>
<p>之后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--添加版权信息--&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#39;my-copyright.swig&#39; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在.\themes\next\source\css_common\components\post\目录下，新建my-post-copyright.styl文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #333333; &#x2F;&#x2F; title color</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #0593d3; &#x2F;&#x2F; link color</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\source\css_common\components\post\post.styl文件，在最后添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>

<p>打开.\scaffolds\post.md文件，设置新文件开启版权声明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">copyright: true #开启</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://blog.csdn.net/u011236348/article/details/88169271">https://blog.csdn.net/u011236348/article/details/88169271</a></p>
</blockquote>
<h1 id="访客-阅读量统计"><a href="#访客-阅读量统计" class="headerlink" title="访客/阅读量统计"></a>访客/阅读量统计</h1><p>打开.\themes\next_config.yml文件，<br>搜索busuanzi_count关键字，把enable设置为true，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi.</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true #访客数</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true #访问数</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true #文章阅读量</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>
<p>同一文件，搜索footer关键字，在其底下添加counter，设值为true。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2015</span><br><span class="line">  # count for visit</span><br><span class="line">  counter: true</span><br></pre></td></tr></table></figure>

<p>打开.\themes\next\layout_partials\footer.swig文件，添加代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>访客、访问次数在网站主页底部，文章阅读量在文章开头。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">https://blog.csdn.net/baidu_34310405/article/details/102665373</a></p>
</blockquote>
<h1 id="博客中插入自己编写的html页面"><a href="#博客中插入自己编写的html页面" class="headerlink" title="博客中插入自己编写的html页面"></a>博客中插入自己编写的html页面</h1><p>看到next官方readme中LEAFERx博客sentence页面很好看，也动手搞一个类似的。利用jQuery的全屏滚动插件fullPage.js实现，网页部分主要参考链接中的代码。</p>
<p>将自己的html页面插入博客中，首先新建一个页面<code>hexo new page &quot;schedule&quot;</code>，在生成的文件夹source/schedule/下复制网页的css/js/html文件。</p>
<p>修改根目录下的<code>_config.yml</code>文件，跳过自定义页面的渲染过程，若文件夹下有子文件夹，需要改为<code>schedule/**</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - &quot;schedule&#x2F;*&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://www.dowebok.com/77.html">https://www.dowebok.com/77.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
        <category>hexo</category>
        <category>next</category>
      </categories>
  </entry>
  <entry>
    <title>latex-tips</title>
    <url>/2021/11/27/latex-tips/</url>
    <content><![CDATA[<blockquote>
<p>latex/overleaf一些笔记。</p>
</blockquote>
<span id="more"></span>

<h1 id="图片排版"><a href="#图片排版" class="headerlink" title="图片排版"></a>图片排版</h1><h2 id="宏包："><a href="#宏包：" class="headerlink" title="宏包："></a>宏包：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\usepackage&#123;graphicx&#125; %插图宏包</span><br><span class="line">\usepackage&#123;subfig&#125; %子图包含宏包，较新</span><br><span class="line">\usepackage&#123;subfigure&#125; %子图包含宏包，较旧</span><br></pre></td></tr></table></figure>

<h2 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;figure&#125;[ht]</span><br><span class="line">\centering</span><br><span class="line">\includegraphics[width&#x3D;10cm]&#123;example.png&#125;</span><br><span class="line">\caption&#123;this is a figure&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<p>\centering表示的是里面紧跟的内容都居中；</p>
<p>\includegrapics[参数1]{参数2}</p>
<p>参数1：对图片进行一些调整，例如宽高缩放width=10cm,height=8cm,scale=0.4</p>
<p>参数2：图片名</p>
<p>\caption{标题}设置图片的一个编号以及为图片添加标题；</p>
<h2 id="图片位置："><a href="#图片位置：" class="headerlink" title="图片位置："></a>图片位置：</h2><p>\begin{figure}[参数1]</p>
<p>参数1：对图片在文中的位置进行设置，h 此处（here）t 页顶（top）b 页底（bottom）p 独立一页（page），<strong>H 固定位置</strong>；</p>
<h2 id="subfig和subfigure的区别："><a href="#subfig和subfigure的区别：" class="headerlink" title="subfig和subfigure的区别："></a>subfig和subfigure的区别：</h2><p>subfig：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;figure&#125;[tbp]</span><br><span class="line">	\centering</span><br><span class="line">	\subfloat[Arabic numerals]&#123;\label&#123;fig:a&#125;\includegraphics[width&#x3D;1in]&#123;placeholder&#125;&#125;\quad</span><br><span class="line">	\subfloat[Arabic numerals]&#123;\label&#123;fig:b&#125;\includegraphics[width&#x3D;1in]&#123;placeholder&#125;&#125;\\	</span><br><span class="line">	\caption&#123;Capital Roman numerals.&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<p>subfigure：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;figure&#125; \centering </span><br><span class="line">\subfigure[figure 1 title.] &#123; \label&#123;fig:a&#125; </span><br><span class="line">\includegraphics[width&#x3D;0.8\columnwidth]&#123;fig1.eps&#125; </span><br><span class="line">&#125; </span><br><span class="line">\subfigure[figure 2 title.] &#123; \label&#123;fig:b&#125; </span><br><span class="line">\includegraphics[width&#x3D;0.8\columnwidth]&#123;fig2.eps&#125; </span><br><span class="line">&#125; </span><br><span class="line">\caption&#123; general title. &#125; </span><br><span class="line">\label&#123;fig&#125; </span><br><span class="line">\end&#123;figure&#125; </span><br></pre></td></tr></table></figure>


<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/143529262">https://zhuanlan.zhihu.com/p/143529262</a></p>
<p><a href="https://blog.csdn.net/yq_forever/article/details/84796802">https://blog.csdn.net/yq_forever/article/details/84796802</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>DC分治</title>
    <url>/2021/10/15/oj-DC/</url>
    <content><![CDATA[<blockquote>
<p>算法课笔记-分治<br>语言：C++</p>
</blockquote>
<span id="more"></span>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>内容。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>oj</category>
      </categories>
  </entry>
  <entry>
    <title>DP动态规划</title>
    <url>/2021/10/15/oj-DP/</url>
    <content><![CDATA[<blockquote>
<p>算法课笔记-动态规划<br>语言: C++</p>
</blockquote>
<span id="more"></span>

<h1 id="中文标题"><a href="#中文标题" class="headerlink" title="中文标题"></a>中文标题</h1><p>内容。</p>
]]></content>
      <categories>
        <category>code</category>
        <category>oj</category>
      </categories>
  </entry>
  <entry>
    <title>python笔记</title>
    <url>/2021/05/31/python-note/</url>
    <content><![CDATA[<blockquote>
<p>python3的一些知识点</p>
</blockquote>
<span id="more"></span>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li><p>函数中的默认参数必须指向不变对象，否则在多次调用时会改变默认值（例如None、str，反例如list）。</p>
</li>
<li><p>可变参数：允许不定量个参数输入，在参数前加<em>，传入参数类型是tuple。<br>在输入list/tuple进入可变参数的函数时，可以加上</em>直接传入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(*num):</span><br><span class="line">    pass</span><br><span class="line">a &#x3D; (1,2,3)</span><br><span class="line">func(*a)</span><br></pre></td></tr></table></figure></li>
<li><p>关键字参数：**来表示，用法同可变参数，区别是传入的参数都为<code>x=y</code>格式，传入后变成一个关键字为x，值为y的字典。<br>可以用作用户可选输入的收集上。</p>
</li>
<li><p>命名关键字参数：用<em>或者可变参数</em>x做分隔符，规定必须输入的关键字参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(x,y,*,z):</span><br><span class="line">    pass</span><br><span class="line">func(1,2,z&#x3D;4)</span><br></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1></li>
<li><p>左闭右开取值，第三个参数表示间隔</p>
</li>
</ul>
<h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><ul>
<li>字典的迭代默认是key，迭代value:<code>for value in d.values()</code>，<br>同时迭代key和value:<code>for k, v in d.items()</code></li>
</ul>
<h1 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a>生成器generator</h1><ul>
<li><p>把生成式列表的[]改为()，每次调用next(x)计算下一个元素的值，或者用for循环迭代</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g &#x3D; (x*x for x in range(0,10))</span><br><span class="line">a &#x3D; next(g)</span><br><span class="line">for i in g:</span><br><span class="line">	print(i)</span><br></pre></td></tr></table></figure></li>
<li><p>在函数中添加yield语句，每次调用<code>next()</code>，运行到yield返回，下次调用从yield下继续</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def odd():</span><br><span class="line">	print(&quot;step 1&quot;)</span><br><span class="line">	yield 1</span><br><span class="line">	print(&quot;step 2&quot;)</span><br><span class="line">	yield 3</span><br><span class="line">	print(&quot;step 3&quot;)</span><br><span class="line">	yield 5</span><br><span class="line">o &#x3D; odd()</span><br><span class="line">a &#x3D; next(o) #step 2\n3</span><br></pre></td></tr></table></figure>

<ul>
<li>这里要注意for循环调用函数生成器时，函数内的print内容无法输出，可以通过<code>StopIteration</code>错误的value获取。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i in o:</span><br><span class="line">	print(i) #1 3 5</span><br><span class="line">while True:</span><br><span class="line">	try:</span><br><span class="line">		x &#x3D; next(o)</span><br><span class="line">		print(x)</span><br><span class="line">	except StopIteration as e:</span><br><span class="line">		print(e.value)</span><br><span class="line">		break</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><ul>
<li>判断对象是不是<code>Iterable</code>对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterable</span><br><span class="line">isinstance([], Iterable) # True</span><br></pre></td></tr></table></figure>

<ul>
<li>可以被<code>next()</code>不断调用并返回下一个值的对象称为迭代器<code>Iterator</code>对象，生成器都是<code>Iterator</code>对象，但是<code>Iterable</code>对象不全是<code>Iterator</code>对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections.abc import Iterator</span><br><span class="line">isinstance([],Iterator) # False</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Iterable</code>对象可以通过使用<code>iter()</code>函数变成<code>Iterator</code>对象，两者的区别是后者是惰性的，可以是无限长度的序列流，无法提前知道长度，前者是有限的，长度可知的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(iter([]), Iterator) # True</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>函数式编程的一个特点：允许把函数本身作为参数传入另一个函数，还允许返回一个函数。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul>
<li>接收另一个函数作为参数的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add(x, y, f):</span><br><span class="line">	return f(x) + f(y)</span><br></pre></td></tr></table></figure>

<ul>
<li>map()：接收两个参数，一个函数，一个<code>Iterable</code>对象，对每个对象实施函数，返回结果是一个<code>Iterator</code>对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">	return x*x</span><br><span class="line">r &#x3D; map(f, [1,2,3,4,5,6])</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce()：接收两个参数，一个函数和一个序列，功能是把结果继续和序列的下一个元素做累积计算。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#str2int功能实现</span><br><span class="line">from functools import reduce</span><br><span class="line">def fn(x, y):</span><br><span class="line">	return x * 10 + y</span><br><span class="line">def char2num(s):</span><br><span class="line">	digits &#x3D; &#123;&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9&#125;</span><br><span class="line">	return digits[s]</span><br><span class="line">reduce(fn, map(char2num, &#39;13579&#39;)) # 13579</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#利用map和reduce编写一个str2float函数，把字符串&#39;123.456&#39;转换成浮点数123.456</span><br><span class="line">def str2float(s):</span><br><span class="line">    def ten(x, y):</span><br><span class="line">        return x*10+y</span><br><span class="line">    def st(x):</span><br><span class="line">        D &#x3D; &#123;&#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: 7, &#39;8&#39;: 8, &#39;9&#39;: 9&#125;</span><br><span class="line">        return D[x]</span><br><span class="line">    a, b &#x3D; s.split(&#39;.&#39;)</span><br><span class="line">    num &#x3D; len(b)</span><br><span class="line">    ans1 &#x3D; reduce(ten, list(map(st, a)))</span><br><span class="line">    ans2 &#x3D; reduce(ten, list(map(st, b)))</span><br><span class="line">    ans &#x3D; ans1 +ans2&#x2F;(10**num)</span><br><span class="line">    return ans</span><br><span class="line">	</span><br><span class="line">print(&#39;str2float(\&#39;123.456\&#39;) &#x3D;&#39;, str2float(&#39;123.456&#39;))</span><br><span class="line">if abs(str2float(&#39;123.456&#39;) - 123.456) &lt; 0.00001:</span><br><span class="line">    print(&#39;测试成功!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;测试失败!&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>filter():接收两个参数，一个函数，一个序列，根据函数的True/False来决定序列是否保留，返回值是一个<code>Iterator</code>对象<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def not_empty(s):</span><br><span class="line">    return s and s.strip()</span><br><span class="line">x &#x3D; list(filter(not_empty, [&#39;A&#39;, &#39;&#39;, &#39;B&#39;, None, &#39;C&#39;, &#39;  &#39;])) # [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>code</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch笔记</title>
    <url>/2021/05/28/pytorch-note/</url>
    <content><![CDATA[<blockquote>
<p>pytorch-动手学深度学习2021笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p><code>[1,:]</code>其中:表示选择范围，只有:表示全选，与数字结合表示范围。</p>
<p><code>[::3,::2]</code>其中::表示跳选，每隔x个选择一个。</p>
<p>张量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; torch.arange(12) #生成</span><br><span class="line">x.shape #形状</span><br><span class="line">x.numel() #元素总数</span><br><span class="line">x &#x3D; x.reshape(3,4) #变换</span><br><span class="line">x &#x3D; torch.zeros((1,2,3)) #全零</span><br><span class="line">x &#x3D; torch.ones((2,3,4)) #全一</span><br><span class="line">x &#x3D; torch.tensor(list) #根据list生成tensor</span><br><span class="line">+ - * &#x2F; ** #对元素进行运算</span><br><span class="line">torch.exp(x) #指数运算</span><br><span class="line">torch.cat((x,y),dim&#x3D;0) #在第零维拼接，零维是最外侧</span><br><span class="line">x &#x3D;&#x3D; y #构建二元张量，是元素比较的结果</span><br><span class="line">x.sum() #求和，结果是一个元素的tensor</span><br><span class="line">x[0:2,:]&#x3D;12 #区域赋值</span><br><span class="line">x[:]&#x3D;x+y &#x2F; x+&#x3D;y #减少内存开销，前后不变</span><br><span class="line">y &#x3D; x.numpy() #tensor转ndarray</span><br><span class="line">x &#x3D; torch.tensor(y) #ndarray转tensor</span><br><span class="line">x.item() &#x2F; float(x) &#x2F; int(x) #0维张量转标量</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>code</category>
        <category>pytorch</category>
      </categories>
  </entry>
  <entry>
    <title>tf-tensor变换</title>
    <url>/2021/05/27/tf-tensor-conversion/</url>
    <content><![CDATA[<blockquote>
<p>tensorflow中tensor变换的函数汇总。</p>
</blockquote>
<span id="more"></span>

<p><code>tf.stack</code><br>list-&gt;tensor<br>（tf.convert_to_tensor）</p>
<p><code>tf.unstack</code><br>tensor-&gt;list</p>
<p><code>tf.expand_dims</code><br>扩展维度</p>
<p><code>reduce_sum/max/mean</code><br>减少维度</p>
<p><code>tf.reshape</code><br>改变各维度大小（可增加减少维度）</p>
<p><code>tf.transpose</code><br>调换维度顺序</p>
<p><code>tf.tile</code><br>不改变维度的复制</p>
<p><code>tf.concat</code><br>不改变维度的拼接</p>
<p><code>tf.broadcast_to</code><br>广播</p>
]]></content>
      <categories>
        <category>code</category>
        <category>tensorflow</category>
      </categories>
  </entry>
  <entry>
    <title>data_preprocess</title>
    <url>/2021/11/27/data-preprocess/</url>
    <content><![CDATA[<blockquote>
<p>中英机器翻译的数据预处理流程，暂存一下看到的优秀博文，过段时间改成自用版本。</p>
</blockquote>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文在news-commentary-v15语料上训练了<strong>中英NMT模型</strong>，并将整个流程，包括工具和数据的准备、数据的预处理、训练及解码，以及中途遇到的问题和解决方案记录在此，希望能够给予别人一些帮助。</p>
<h1 id="1-相关工具及目录结构"><a href="#1-相关工具及目录结构" class="headerlink" title="1 相关工具及目录结构"></a>1 相关工具及目录结构</h1><h2 id="1-1-相关工具"><a href="#1-1-相关工具" class="headerlink" title="1.1 相关工具"></a>1.1 相关工具</h2><p>除<strong>jieba</strong>是使用<code>pip install</code>安装外，其他几个工具都是建议直接克隆库到自己的用户目录中，方便使用其脚本(<strong>moses</strong>/<strong>subword-nmt</strong>)，或未来可能要自己拓展其中的模型(<strong>fairseq</strong>)</p>
<ol>
<li><p>Moses (一个SMT工具，在这里只会用到一些预处理脚本，如：tokenisation,  truecasing, cleaning)，安装指令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;moses-smt&#x2F;mosesdecoder.git</span><br></pre></td></tr></table></figure></li>
<li><p>subword-nmt (使用BPE算法生成子词的预处理脚本)，安装指令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rsennrich&#x2F;subword-nmt.git</span><br></pre></td></tr></table></figure></li>
<li><p>jieba (中文分词组件)，安装指令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure></li>
<li><p>fairseq (一个基于PyTorch的序列建模工具)，安装指令如下：</p>
<p>fairseq安装参考：<a href="https://zhuanlan.zhihu.com/p/194176917">https://zhuanlan.zhihu.com/p/194176917</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pytorch&#x2F;fairseq</span><br><span class="line">cd fairseq</span><br><span class="line">pip install --editable .&#x2F;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-2-目录结构与初始化"><a href="#1-2-目录结构与初始化" class="headerlink" title="1.2 目录结构与初始化"></a>1.2 目录结构与初始化</h2><h3 id="1-2-1-目录结构"><a href="#1-2-1-目录结构" class="headerlink" title="1.2.1 目录结构"></a>1.2.1 目录结构</h3><p>提前组织一个目录结构的好处是可以让后面的一系列操作更加统一、规范化。下表中<code>~</code>代表linux系统中<strong>我的用户目录</strong>, v15news目录名代表此次我使用的数据集名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~</span><br><span class="line">├── mosesdecoder</span><br><span class="line">├── subword-nmt</span><br><span class="line">├── fairseq</span><br><span class="line">└── nmt</span><br><span class="line">    ├── data</span><br><span class="line">        └── v15news</span><br><span class="line">            ├── result          # 用于存放翻译结果</span><br><span class="line">            └── data-bin        # 用于存放二进制文件</span><br><span class="line">    ├── models                  # 用于保存过程中的model文件和checkpoint</span><br><span class="line">        └── v15news</span><br><span class="line">            └── checkpoints     # 保存checkpoints</span><br><span class="line">    ├── utils                   # 一些其他工具</span><br><span class="line">        ├── split.py            # 用于划分train,valid,test</span><br><span class="line">        └── cut2.py             # 用于划分src,tgt</span><br><span class="line">    └── scripts                 # 一些脚本</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-用于初始化的bash文件"><a href="#1-2-2-用于初始化的bash文件" class="headerlink" title="1.2.2 用于初始化的bash文件"></a>1.2.2 用于初始化的bash文件</h3><p>这个文件是在上述目录结构的基础下，定义了一些后面需要用到的变量(主要是<strong>各种脚本的路径</strong>)，包括tokenizer.perl, truecase.perl等，可以在linux中使用bash xx.sh运行，也可以把这些内容直接全部复制到linux命令行中按回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">src&#x3D;zh</span><br><span class="line">tgt&#x3D;en</span><br><span class="line"></span><br><span class="line">SCRIPTS&#x3D;~&#x2F;mosesdecoder&#x2F;scripts</span><br><span class="line">TOKENIZER&#x3D;$&#123;SCRIPTS&#125;&#x2F;tokenizer&#x2F;tokenizer.perl</span><br><span class="line">DETOKENIZER&#x3D;$&#123;SCRIPTS&#125;&#x2F;tokenizer&#x2F;detokenizer.perl</span><br><span class="line">LC&#x3D;$&#123;SCRIPTS&#125;&#x2F;tokenizer&#x2F;lowercase.perl</span><br><span class="line">TRAIN_TC&#x3D;$&#123;SCRIPTS&#125;&#x2F;recaser&#x2F;train-truecaser.perl</span><br><span class="line">TC&#x3D;$&#123;SCRIPTS&#125;&#x2F;recaser&#x2F;truecase.perl</span><br><span class="line">DETC&#x3D;$&#123;SCRIPTS&#125;&#x2F;recaser&#x2F;detruecase.perl</span><br><span class="line">NORM_PUNC&#x3D;$&#123;SCRIPTS&#125;&#x2F;tokenizer&#x2F;normalize-punctuation.perl</span><br><span class="line">CLEAN&#x3D;$&#123;SCRIPTS&#125;&#x2F;training&#x2F;clean-corpus-n.perl</span><br><span class="line">BPEROOT&#x3D;~&#x2F;subword-nmt&#x2F;subword_nmt</span><br><span class="line">MULTI_BLEU&#x3D;$&#123;SCRIPTS&#125;&#x2F;generic&#x2F;multi-bleu.perl</span><br><span class="line">MTEVAL_V14&#x3D;$&#123;SCRIPTS&#125;&#x2F;generic&#x2F;mteval-v14.pl</span><br><span class="line"></span><br><span class="line">data_dir&#x3D;~&#x2F;nmt&#x2F;data&#x2F;v15news</span><br><span class="line">model_dir&#x3D;~&#x2F;nmt&#x2F;models&#x2F;v15news</span><br><span class="line">utils&#x3D;~&#x2F;nmt&#x2F;utils</span><br></pre></td></tr></table></figure>

<h1 id="2-数据的准备"><a href="#2-数据的准备" class="headerlink" title="2 数据的准备"></a>2 数据的准备</h1><h2 id="2-1-平行语料"><a href="#2-1-平行语料" class="headerlink" title="2.1 平行语料"></a>2.1 平行语料</h2><p>对于有监督神经机器翻译，能够找到的中英平行语料如下：</p>
<ol>
<li><a href="https://github.com/NiuTrans/NiuTrans.SMT/tree/master/sample-data">NEU nlp lab 开源语料</a> (10w，国内政治新闻领域)</li>
<li><a href="http://www.statmt.org/wmt20/translation-task.html">WMT新闻翻译任务News Commentary语料</a> (32w左右，国际新闻领域。其实News Commentary每年都有新闻数据集，但是基本没啥变化，每次在前一年的基础上加几百句，所以这里的链接直接指向最新的WMT20)</li>
<li><a href="https://catalog.ldc.upenn.edu/LDC2010T21">NIST数据集</a> (200w左右，需要购买)</li>
<li><a href="https://conferences.unite.un.org/UNCORPUS/zh">United Nations Parallel Corpus</a> (1500w左右，联合国文件领域)</li>
</ol>
<p>我本人使用过语料1、3，其中3是跟已购买的师兄要的，不向外提供。其实初次训练建议使用语料1，规模小训练快，能够快速体验整个流程。当然，中英还有很多其他语料，见<a href="https://chinesenlp.xyz/#/docs/machine_translation">参考资料1</a>, <a href="https://www.cluebenchmarks.com/dataSet_search.html">2</a></p>
<h2 id="2-2-数据预处理"><a href="#2-2-数据预处理" class="headerlink" title="2.2 数据预处理"></a>2.2 数据预处理</h2><h3 id="2-2-1-数据格式"><a href="#2-2-1-数据格式" class="headerlink" title="2.2.1 数据格式"></a>2.2.1 数据格式</h3><p>在本篇博客中，我准备使用WMT20新闻翻译任务的<strong>news-commentary-v15语料</strong>，放于以下位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">└── nmt</span><br><span class="line">    ├── data</span><br><span class="line">        └── v15news     </span><br><span class="line">            └── news-commentary-v15.en-zh.tsv</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1929 or 1989?	1929年还是1989年?</span><br><span class="line">PARIS – As the economic crisis deepens and widens, the world has been searching for historical analogies to help us understand what has been happening.	巴黎-随着经济危机不断加深和蔓延，整个世界一直在寻找历史上的类似事件希望有助于我们了解目前正在发生的情况。</span><br><span class="line">At the start of the crisis, many people likened it to 1982 or 1973, which was reassuring, because both dates refer to classical cyclical downturns.	一开始，很多人把这次危机比作1982年或1973年所发生的情况，这样得类比是令人宽心的，因为这两段时期意味着典型的周期性衰退。</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-切分"><a href="#2-2-2-切分" class="headerlink" title="2.2.2 切分"></a>2.2.2 切分</h3><p>首先，需要将一个单独的数据文件切分成标准格式，即源语言(raw.zh)、目标语言(raw.en)文件各一个，一行一句，附自己写的脚本(~/nmt/utils/cut2.py)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Usage: </span><br><span class="line">python cut2.py fpath new_data_dir</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">def cut2(fpath, new_data_dir, nsrc&#x3D;&#39;zh&#39;, ntgt&#x3D;&#39;en&#39;):</span><br><span class="line">    fp &#x3D; open(fpath, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    src_fp &#x3D; open(new_data_dir + &#39;raw.&#39; + nsrc, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    tgt_fp &#x3D; open(new_data_dir + &#39;raw.&#39; + ntgt, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    for line in fp.readlines():</span><br><span class="line">        tgt_line, src_line &#x3D; line.replace(&#39;\n&#39;, &#39;&#39;).split(&#39;\t&#39;)</span><br><span class="line">        src_fp.write(src_line + &#39;\n&#39;)</span><br><span class="line">        tgt_fp.write(tgt_line + &#39;\n&#39;)</span><br><span class="line">    src_fp.close()</span><br><span class="line">    tgt_fp.close()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:      </span><br><span class="line">    cut2(fpath&#x3D;sys.argv[1], new_data_dir&#x3D;sys.argv[2], nsrc&#x3D;&#39;zh&#39;, ntgt&#x3D;&#39;en&#39;)</span><br></pre></td></tr></table></figure>

<p>使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python $&#123;utils&#125;&#x2F;cut2.py $&#123;data_dir&#125;&#x2F;news-commentary-v15.en-zh.tsv $&#123;data_dir&#125;&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>后注：</strong> 在linux里可以直接用cut实现 <code>cut -f 1 fpath &gt; new_data_dir/raw.en | cut -f 2 fpath &gt; new_data_dir/raw.zh</code></p>
<p>切分后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news     </span><br><span class="line">        ├── news-commentary-v15.en-zh.tsv</span><br><span class="line">        ├── raw.zh</span><br><span class="line">        └── raw.en</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-normalize-punctuation-可选"><a href="#2-2-3-normalize-punctuation-可选" class="headerlink" title="2.2.3 normalize-punctuation(可选)"></a>2.2.3 normalize-punctuation(可选)</h3><p>标点符号的标准化，同时对双语文件(raw.en, raw.zh)处理，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl $&#123;NORM_PUNC&#125; -l en &lt; $&#123;data_dir&#125;&#x2F;raw.en &gt; $&#123;data_dir&#125;&#x2F;norm.en</span><br><span class="line">perl $&#123;NORM_PUNC&#125; -l zh &lt; $&#123;data_dir&#125;&#x2F;raw.zh &gt; $&#123;data_dir&#125;&#x2F;norm.zh</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news     </span><br><span class="line">        ...</span><br><span class="line">        ├── norm.zh</span><br><span class="line">        └── norm.en</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># raw.en</span><br><span class="line">“We can’t waste time,” he says.</span><br><span class="line">Yet, according to the political economist Moeletsi Mbeki, at his core, “Zuma is a conservative.”</span><br><span class="line"></span><br><span class="line"># norm.en</span><br><span class="line">&quot;We can&#39;t waste time,&quot; he says.</span><br><span class="line">Yet, according to the political economist Moeletsi Mbeki, at his core, &quot;Zuma is a conservative.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-中文分词"><a href="#2-2-4-中文分词" class="headerlink" title="2.2.4 中文分词"></a>2.2.4 中文分词</h3><p>对标点符号标准化后的中文文件(norm.zh)进行分词处理，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m jieba -d &quot; &quot; $&#123;data_dir&#125;&#x2F;norm.zh &gt; $&#123;data_dir&#125;&#x2F;norm.seg.zh</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news     </span><br><span class="line">        ...</span><br><span class="line">        └── norm.seg.zh</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># norm.zh</span><br><span class="line">1929年还是1989年?</span><br><span class="line">巴黎-随着经济危机不断加深和蔓延，整个世界一直在寻找历史上的类似事件希望有助于我们了解目前正在发生的情况。</span><br><span class="line">一开始，很多人把这次危机比作1982年或1973年所发生的情况，这样得类比是令人宽心的，因为这两段时期意味着典型的周期性衰退。</span><br><span class="line"></span><br><span class="line"># norm.seg.zh</span><br><span class="line">1929 年 还是 1989 年 ?</span><br><span class="line">巴黎 - 随着 经济危机 不断 加深 和 蔓延 ， 整个 世界 一直 在 寻找 历史 上 的 类似 事件 希望 有助于 我们 了解 目前 正在 发生 的 情况 。</span><br><span class="line">一 开始 ， 很多 人 把 这次 危机 比作 1982 年 或 1973 年 所 发生 的 情况 ， 这样 得 类比 是 令人 宽心 的 ， 因为 这 两段 时期 意味着 典型 的 周期性 衰退 。</span><br></pre></td></tr></table></figure>

<h3 id="2-2-5-tokenize"><a href="#2-2-5-tokenize" class="headerlink" title="2.2.5 tokenize"></a>2.2.5 tokenize</h3><p>对上述处理后的双语文件(norm.en, norm.seg.zh)进行标记化处理，有很多功能(1.将<strong>英文单词</strong>与<strong>标点符号</strong>用空格分开 2.将多个连续空格简化为一个空格 3.将很多符号替换成转义字符，如：把<code>&quot;</code>替换成<code>&quot;</code>、把<code>can&#39;t</code>替换成<code>can &#39;t</code>)，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;TOKENIZER&#125; -l en &lt; $&#123;data_dir&#125;&#x2F;norm.en &gt; $&#123;data_dir&#125;&#x2F;norm.tok.en</span><br><span class="line">$&#123;TOKENIZER&#125; -l zh &lt; $&#123;data_dir&#125;&#x2F;norm.seg.zh &gt; $&#123;data_dir&#125;&#x2F;norm.seg.tok.zh</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news     </span><br><span class="line">        ...</span><br><span class="line">        ├── norm.tok.en</span><br><span class="line">        └── norm.seg.tok.zh</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># norm.seg.zh</span><br><span class="line">目前 的 趋势 是 ， 要么 是 过度 的 克制 （ 欧洲   ）   ，   要么 是 努力 的 扩展 （ 美国   ）   。</span><br><span class="line">而 历史 是 不 公平 的 。   尽管 美国 要 为 当今 的 全球 危机 负 更 大 的 责任 ， 但 美国 可能 会 比 大多数 国家 以 更 良好 的 势态 走出 困境 。</span><br><span class="line"></span><br><span class="line"># norm.seg.tok.zh</span><br><span class="line">目前 的 趋势 是 ， 要么 是 过度 的 克制 （ 欧洲 ） ， 要么 是 努力 的 扩展 （ 美国 ） 。</span><br><span class="line">而 历史 是 不 公平 的 。 尽管 美国 要 为 当今 的 全球 危机 负 更 大 的 责任 ， 但 美国 可能 会 比 大多数 国家 以 更 良好 的 势态 走出 困境 。</span><br><span class="line"></span><br><span class="line"># norm.en</span><br><span class="line">&quot;We can&#39;t waste time,&quot; he says.</span><br><span class="line">Of course, the fall of the house of Lehman Brothers has nothing to do with the fall of the Berlin Wall.</span><br><span class="line">Second, Zoellick should ask why the Bank spends only 2.5% of its budget on the &quot;knowledge bank&quot; research function that it trumpets so proudly in its external relations materials, while it spends three times that amount on maintaining its executive board.</span><br><span class="line"></span><br><span class="line"># norm.tok.en</span><br><span class="line">&quot; We can &amp;apos;t waste time , &quot; he says .</span><br><span class="line">Of course , the fall of the house of Lehman Brothers has nothing to do with the fall of the Berlin Wall .</span><br><span class="line">Second , Zoellick should ask why the Bank spends only 2.5 % of its budget on the &quot; knowledge bank &quot; research function that it trumpets so proudly in its external relations materials , while it spends three times that amount on maintaining its executive board .</span><br></pre></td></tr></table></figure>

<h3 id="2-2-6-truecase"><a href="#2-2-6-truecase" class="headerlink" title="2.2.6 truecase"></a>2.2.6 truecase</h3><p>对上述处理后的英文文件(norm.tok.en)进行大小写转换处理(对于句中的每个英文单词，尤其是<strong>句首单词</strong>，在数据中<strong>学习</strong>最适合它们的大小写形式)，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;TRAIN_TC&#125; --model $&#123;model_dir&#125;&#x2F;truecase-model.en --corpus $&#123;data_dir&#125;&#x2F;norm.tok.en</span><br><span class="line">$&#123;TC&#125; --model $&#123;model_dir&#125;&#x2F;truecase-model.en &lt; $&#123;data_dir&#125;&#x2F;norm.tok.en &gt; $&#123;data_dir&#125;&#x2F;norm.tok.true.en</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        └── norm.tok.true.en</span><br><span class="line">├── models</span><br><span class="line">    └── v15news</span><br><span class="line">        └── truecase-model.en</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># norm.tok.en</span><br><span class="line">PARIS - As the economic crisis deepens and widens , the world has been searching for historical analogies to help us understand what has been happening .</span><br><span class="line">At the start of the crisis , many people likened it to 1982 or 1973 , which was reassuring , because both dates refer to classical cyclical downturns .</span><br><span class="line">When the TTIP was first proposed , Europe seemed to recognize its value .</span><br><span class="line">Europe is being cautious in the name of avoiding debt and defending the euro , whereas the US has moved on many fronts in order not to waste an ideal opportunity to implement badly needed structural reforms .</span><br><span class="line"></span><br><span class="line"># norm.tok.true.en</span><br><span class="line">Paris - As the economic crisis deepens and widens , the world has been searching for historical analogies to help us understand what has been happening .</span><br><span class="line">at the start of the crisis , many people likened it to 1982 or 1973 , which was reassuring , because both dates refer to classical cyclical downturns .</span><br><span class="line">when the TTIP was first proposed , Europe seemed to recognize its value .</span><br><span class="line">Europe is being cautious in the name of avoiding debt and defending the euro , whereas the US has moved on many fronts in order not to waste an ideal opportunity to implement badly needed structural reforms .</span><br></pre></td></tr></table></figure>

<h3 id="2-2-7-bpe"><a href="#2-2-7-bpe" class="headerlink" title="2.2.7 bpe"></a>2.2.7 bpe</h3><p>对上述处理后的双语文件(norm.tok.true.en, norm.seg.tok.zh)进行子词处理(可以理解为更细粒度的分词)，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python $&#123;BPEROOT&#125;&#x2F;learn_joint_bpe_and_vocab.py --input $&#123;data_dir&#125;&#x2F;norm.tok.true.en  -s 32000 -o $&#123;model_dir&#125;&#x2F;bpecode.en --write-vocabulary $&#123;model_dir&#125;&#x2F;voc.en</span><br><span class="line">python $&#123;BPEROOT&#125;&#x2F;apply_bpe.py -c $&#123;model_dir&#125;&#x2F;bpecode.en --vocabulary $&#123;model_dir&#125;&#x2F;voc.en &lt; $&#123;data_dir&#125;&#x2F;norm.tok.true.en &gt; $&#123;data_dir&#125;&#x2F;norm.tok.true.bpe.en</span><br><span class="line"></span><br><span class="line">python $&#123;BPEROOT&#125;&#x2F;learn_joint_bpe_and_vocab.py --input $&#123;data_dir&#125;&#x2F;norm.seg.tok.zh  -s 32000 -o $&#123;model_dir&#125;&#x2F;bpecode.zh --write-vocabulary $&#123;model_dir&#125;&#x2F;voc.zh</span><br><span class="line">python $&#123;BPEROOT&#125;&#x2F;apply_bpe.py -c $&#123;model_dir&#125;&#x2F;bpecode.zh --vocabulary $&#123;model_dir&#125;&#x2F;voc.zh &lt; $&#123;data_dir&#125;&#x2F;norm.seg.tok.zh &gt; $&#123;data_dir&#125;&#x2F;norm.seg.tok.bpe.zh</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        ├── norm.seg.tok.bpe.zh</span><br><span class="line">        └── norm.tok.true.bpe.en</span><br><span class="line">├── models</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        ├── voc.zh</span><br><span class="line">        ├── voc.en</span><br><span class="line">        ├── bpecode.zh</span><br><span class="line">        └── bpecode.en</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># norm.seg.tok.zh</span><br><span class="line">从 一流 的 麻省理工学院 的 媒体 实验室 到 哈佛大学 的 数学 和 经济系 ， 亚洲 人 - 尤其 是 中国 和 印度人 - 到处 都 是 ， 犹如 公元前 一 世纪 在 雅典 的 罗马 人 一样 ： 他们 对 那里 学到 太 多 东西 的 人们 充满 了 敬佩 ， 而 他们 将 在 今后 几十年 打败 他们 学习 的 对象 。</span><br><span class="line">这 不仅 加大 了 预防 危机 的 难度 - - 尤其 因为 它 为 参与者 提供 了 钻空子 和 逃避责任 的 机会 - - 还 使得 人们 越来越 难以 采取措施 来 应对 危机 。</span><br><span class="line">它们 将 通胀 目标 设定 在 2 % 左右 - - 这 意味着 当 波涛汹涌 时 他们 根本 没有 多少 施展 空间 。</span><br><span class="line"></span><br><span class="line"># norm.seg.tok.bpe.zh</span><br><span class="line">从 一流 的 麻省理工学院 的 媒体 实验室 到 哈佛大学 的 数学 和 经济@@ 系 ， 亚洲 人 - 尤其 是 中国 和 印度人 - 到处 都 是 ， 犹如 公元前 一 世纪 在 雅典 的 罗马 人 一样 ： 他们 对 那里 学到 太 多 东西 的 人们 充满 了 敬佩 ， 而 他们 将 在 今后 几十年 打败 他们 学习 的 对象 。</span><br><span class="line">这 不仅 加大 了 预防 危机 的 难度 - - 尤其 因为 它 为 参与者 提供 了 钻@@ 空子 和 逃避@@ 责任 的 机会 - - 还 使得 人们 越来越 难以 采取措施 来 应对 危机 。</span><br><span class="line">它们 将 通胀 目标 设定 在 2 % 左右 - - 这 意味着 当 波@@ 涛@@ 汹涌 时 他们 根本 没有 多少 施展 空间 。</span><br><span class="line"></span><br><span class="line"># norm.tok.true.en</span><br><span class="line">indeed , on the surface it seems to be its perfect antithesis : the collapse of a wall symbolizing oppression and artificial divisions versus the collapse of a seemingly indestructible and reassuring institution of financial capitalism .</span><br><span class="line">as a visiting professor at Harvard and MIT , I am getting a good preview of what the world could look like when the crisis finally passes .</span><br><span class="line">one senses something like the making of an American-Asian dominated universe .</span><br><span class="line"></span><br><span class="line"># norm.tok.true.bpe.en</span><br><span class="line">indeed , on the surface it seems to be its perfect anti@@ thesis : the collapse of a wall symboli@@ zing oppression and artificial divisions versus the collapse of a seemingly inde@@ struc@@ tible and reassuring institution of financial capitalism .</span><br><span class="line">as a visiting professor at Harvard and MIT , I am getting a good pre@@ view of what the world could look like when the crisis finally passes .</span><br><span class="line">one senses something like the making of an American-@@ Asian dominated universe .</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>后注：</strong><br>需要注意的是，我为了方便，步骤上失去了一些正确性。正确的做法应该是在<strong>训练集</strong>中学习bpe模型，再将bpe模型应用到<strong>测试集</strong>和<strong>验证集</strong>中。而我是直接在全部数据中学bpe模型了。</p>
</blockquote>
<h3 id="2-2-8-clean"><a href="#2-2-8-clean" class="headerlink" title="2.2.8 clean"></a>2.2.8 clean</h3><p>对上述处理后的双语文件(norm.tok.true.bpe.en, norm.seg.tok.bpe.zh)进行过滤(可以过滤<strong>最小长度</strong>和<strong>最大长度</strong>之间的句对，这样能够有效过滤空白行。还可以过滤<strong>长度比</strong>不合理的句对)，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv $&#123;data_dir&#125;&#x2F;norm.seg.tok.bpe.zh $&#123;data_dir&#125;&#x2F;toclean.zh</span><br><span class="line">mv $&#123;data_dir&#125;&#x2F;norm.tok.true.bpe.en $&#123;data_dir&#125;&#x2F;toclean.en </span><br><span class="line">$&#123;CLEAN&#125; $&#123;data_dir&#125;&#x2F;toclean zh en $&#123;data_dir&#125;&#x2F;clean 1 256</span><br></pre></td></tr></table></figure>

<p>处理后的文件在目录中如下格式存放：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        ├── clean.zh</span><br><span class="line">        └── clean.en</span><br></pre></td></tr></table></figure>

<p>效果如下(每行最开始标出了<strong>行号</strong>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># norm.tok.true.bpe.en</span><br><span class="line">30 we can only hope that , in the end , the consequences of 2009 similarly prove to be far less dramatic than we now - intuitively and in our historical refle@@ xes - feel them to be .</span><br><span class="line">31</span><br><span class="line">32 one Hund@@ red Years of Ine@@ p@@ titude</span><br><span class="line"></span><br><span class="line"># clean.en</span><br><span class="line">30 we can only hope that , in the end , the consequences of 2009 similarly prove to be far less dramatic than we now - intuitively and in our historical refle@@ xes - feel them to be .</span><br><span class="line">31 one Hund@@ red Years of Ine@@ p@@ titude</span><br><span class="line">32 Berlin - The global financial and economic crisis that began in 2008 was the greatest economic stre@@ ss-@@ test since the Great Depression , and the greatest challenge to social and political systems since World War II .</span><br><span class="line"></span><br><span class="line"># norm.seg.tok.bpe.zh</span><br><span class="line">30 我们 只能 希望 2009 年 的 危机 同样 地 最后 被 证明 是 远远 低于 我们 现在 以 直觉 和 历史 回顾 的 方式 � � 感觉 到 的 那么 剧烈 。</span><br><span class="line">31 </span><br><span class="line">32 百年 愚@@ 顽</span><br><span class="line"></span><br><span class="line"># clean.zh</span><br><span class="line">30 我们 只能 希望 2009 年 的 危机 同样 地 最后 被 证明 是 远远 低于 我们 现在 以 直觉 和 历史 回顾 的 方式 � � 感觉 到 的 那么 剧烈 。</span><br><span class="line">31 百年 愚@@ 顽</span><br><span class="line">32 柏林 - - 2008 年 爆发 的 全球 金融 和 经济危机 是 自大 萧条 以来 最 严峻 的 一次 经济 压力 测试 ， 也 是 自 二战 以来 社会 和 政治 制度 所 面临 的 最 严重 挑战 。</span><br></pre></td></tr></table></figure>

<h3 id="2-2-9-split"><a href="#2-2-9-split" class="headerlink" title="2.2.9 split"></a>2.2.9 split</h3><p>最后，双语文件(clean.zh, clean.en)都需要按比例划分出训练集、测试集、开发集(所以共6个文件，为方便区分，直接以 ‘train.en’, ‘valid.zh’ 这样的格式命名)，附自己写的脚本(~/nmt/utils/split.py)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">Usage:</span><br><span class="line">python split.py src_fpath tgt_fpath new_data_dir</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">def split(src_fpath, tgt_fpath, nsrc&#x3D;&#39;zh&#39;, ntgt&#x3D;&#39;en&#39;, ratio&#x3D;(0.9, 0.05, 0.05), new_data_dir&#x3D;&#39;&#39;):</span><br><span class="line">  src_fp &#x3D; open(src_fpath, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">  tgt_fp &#x3D; open(tgt_fpath, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">  </span><br><span class="line">  src_train, src_test, src_val &#x3D; open(new_data_dir + &#39;train.&#39; + nsrc, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;), \</span><br><span class="line">    open(new_data_dir + &#39;test.&#39; + nsrc, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;), open(new_data_dir + &#39;valid.&#39; + nsrc, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">  tgt_train, tgt_test, tgt_val &#x3D; open(new_data_dir + &#39;train.&#39; + ntgt, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;), \</span><br><span class="line">    open(new_data_dir + &#39;test.&#39; + ntgt, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;), open(new_data_dir + &#39;valid.&#39; + ntgt, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">  </span><br><span class="line">  src, tgt &#x3D; src_fp.readlines(), tgt_fp.readlines()</span><br><span class="line">  for s, t in zip(src, tgt):</span><br><span class="line">      rand &#x3D; random.random()</span><br><span class="line">      if 0 &lt; rand &lt;&#x3D; ratio[0]:</span><br><span class="line">        src_train.write(s)</span><br><span class="line">        tgt_train.write(t)</span><br><span class="line">      elif ratio[0] &lt; rand &lt;&#x3D; ratio[0] + ratio[1]:</span><br><span class="line">        src_test.write(s)</span><br><span class="line">        tgt_test.write(t)</span><br><span class="line">      else:</span><br><span class="line">        src_val.write(s)</span><br><span class="line">        tgt_val.write(t)</span><br><span class="line">  </span><br><span class="line">  src_fp.close()</span><br><span class="line">  tgt_fp.close()</span><br><span class="line">  src_train.close()</span><br><span class="line">  src_test.close()</span><br><span class="line">  src_val.close()</span><br><span class="line">  tgt_train.close()</span><br><span class="line">  tgt_test.close()</span><br><span class="line">  tgt_val.close()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:      </span><br><span class="line">    split(src_fpath&#x3D;sys.argv[1], tgt_fpath&#x3D;sys.argv[2], nsrc&#x3D;&#39;zh&#39;, ntgt&#x3D;&#39;en&#39;, ratio&#x3D;(0.95, 0.025, 0.025), new_data_dir&#x3D;sys.argv[3])</span><br></pre></td></tr></table></figure>

<p>使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python $&#123;utils&#125;&#x2F;split.py $&#123;data_dir&#125;&#x2F;clean.zh $&#123;data_dir&#125;&#x2F;clean.en $&#123;data_dir&#125;&#x2F;</span><br></pre></td></tr></table></figure>

<p>最后，data/v15news目录中有如下数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        ├── test.en</span><br><span class="line">        ├── test.zh</span><br><span class="line">        ├── train.en</span><br><span class="line">        ├── train.zh</span><br><span class="line">        ├── valid.en</span><br><span class="line">        └── valid.zh</span><br></pre></td></tr></table></figure>

<h1 id="3-训练过程"><a href="#3-训练过程" class="headerlink" title="3 训练过程"></a>3 训练过程</h1><h2 id="3-1-生成词表及二进制文件"><a href="#3-1-生成词表及二进制文件" class="headerlink" title="3.1 生成词表及二进制文件"></a>3.1 生成词表及二进制文件</h2><p>首先用预处理后的六个文件(train.zh, valid.en等)，使用<code>fairseq-preprocess</code>命令生成<strong>词表</strong>和<strong>训练用的二进制文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fairseq-preprocess --source-lang $&#123;src&#125; --target-lang $&#123;tgt&#125; \</span><br><span class="line">    --trainpref $&#123;data_dir&#125;&#x2F;train --validpref $&#123;data_dir&#125;&#x2F;valid --testpref $&#123;data_dir&#125;&#x2F;test \</span><br><span class="line">    --destdir $&#123;data_dir&#125;&#x2F;data-bin</span><br></pre></td></tr></table></figure>

<p>生成的文件都保存在data-bin目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── data</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        └── data-bin</span><br><span class="line">            ├── dict.zh</span><br><span class="line">            ├── dict.en</span><br><span class="line">            ├── preprocess.log</span><br><span class="line">            ├── train.zh-en.zh.idx</span><br><span class="line">            ...</span><br><span class="line">            └── valid.zh-en.en.bin</span><br></pre></td></tr></table></figure>

<p>需要提醒的是：训练阶段使用的是<strong>训练集</strong>和<strong>验证集</strong>，解码阶段使用的是<strong>测试集</strong></p>
<h2 id="3-2-训练"><a href="#3-2-训练" class="headerlink" title="3.2 训练"></a>3.2 训练</h2><p>使用<code>fairseq-train</code>命令进行训练，其中有很多可以自由设置的超参数，比如选择使用什么模型，模型的参数等。其中，<code>--save-dir</code> 这个参数是指每一个epoch结束后模型保存的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES&#x3D;0,1,2,3 nohup fairseq-train $&#123;data_dir&#125;&#x2F;data-bin --arch transformer \</span><br><span class="line">	--source-lang $&#123;src&#125; --target-lang $&#123;tgt&#125;  \</span><br><span class="line">    --optimizer adam  --lr 0.001 --adam-betas &#39;(0.9, 0.98)&#39; \</span><br><span class="line">    --lr-scheduler inverse_sqrt --max-tokens 4096  --dropout 0.3 \</span><br><span class="line">    --criterion label_smoothed_cross_entropy  --label-smoothing 0.1 \</span><br><span class="line">    --max-update 200000  --warmup-updates 4000 --warmup-init-lr &#39;1e-07&#39; \</span><br><span class="line">    --keep-last-epochs 10 --num-workers 8 \</span><br><span class="line">	--save-dir $&#123;model_dir&#125;&#x2F;checkpoints &amp;</span><br></pre></td></tr></table></figure>

<p>我自己训练时是在3块GTX TITAN X卡上跑了6个小时，共跑了49个epoch，但是在第22个epoch的时候已经收敛(只需要看验证集上的ppl的变化即可)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">epoch 020 | valid on &#39;valid&#39; subset | loss 4.366 | nll_loss 2.652 | ppl 6.29 | wps 50387.3 | wpb 8026 | bsz 299.8 | num_updates 14400 | best_loss 4.366</span><br><span class="line">epoch 021 | valid on &#39;valid&#39; subset | loss 4.36 | nll_loss 2.647 | ppl 6.27 | wps 51992.7 | wpb 8026 | bsz 299.8 | num_updates 15120 | best_loss 4.36</span><br><span class="line">epoch 022 | valid on &#39;valid&#39; subset | loss 4.361 | nll_loss 2.644 | ppl 6.25 | wps 49009.9 | wpb 8026 | bsz 299.8 | num_updates 15840 | best_loss 4.36</span><br><span class="line">epoch 023 | valid on &#39;valid&#39; subset | loss 4.369 | nll_loss 2.65 | ppl 6.28 | wps 51878.9 | wpb 8026 | bsz 299.8 | num_updates 16560 | best_loss 4.36</span><br><span class="line">epoch 023 | valid on &#39;valid&#39; subset | loss 4.369 | nll_loss 2.65 | ppl 6.28 | wps 51878.9 | wpb 8026 | bsz 299.8 | num_updates 16560 | best_loss 4.36</span><br></pre></td></tr></table></figure>

<p>由于<code>--keep-last-epochs</code>这个参数我设为10，所以我最后10个epoch的模型都保存在以下目录中。此外，还会额外保存效果最好的模型(即第22个epoch)和最后一个模型(即第49个epoch，可以用于下一次训练)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── models</span><br><span class="line">    └── v15news</span><br><span class="line">        ...</span><br><span class="line">        └── checkpoints</span><br><span class="line">            ├── checkpoint40.pt</span><br><span class="line">            ...</span><br><span class="line">            ├── checkpoint49.pt</span><br><span class="line">            ├── checkpoint_best.pt</span><br><span class="line">            └── checkpoint_last.pt</span><br></pre></td></tr></table></figure>

<h2 id="3-3-解码"><a href="#3-3-解码" class="headerlink" title="3.3 解码"></a>3.3 解码</h2><p>fairseq中支持两种解码命令<code>generate</code>和<code>interactive</code>。</p>
<p>其区别很简单，<code>generate</code>使用<strong>二进制文件</strong>，这个二进制文件是在<code>fairseq-preprocess</code>过程生成的，当时提供了一个<code>testpref</code>参数。也就是说测试集的src和tgt都是已获得的，这种场景符合自己在公开的数据集上做实验（如WMT14en-de），需要在论文中报告测试集结果。</p>
<p>而<code>interactive</code>用于文本文件，也就是说不需要二进制文件，在<code>fairseq-preprocess</code>中也就不需要提供<code>testpref</code>参数。这种场景符合在比赛中，比赛方只提供测试集中的src部分，需要自己来解码得到tgt，并最终提交。</p>
<h3 id="3-3-1-生成式解码"><a href="#3-3-1-生成式解码" class="headerlink" title="3.3.1 生成式解码"></a>3.3.1 生成式解码</h3><p>使用<code>fairseq-generate</code>命令进行生成式解码(<strong>用于预处理后的二进制文件</strong>)，可以自行选择是否添加<code>--remove-bpe</code>参数，使得在生成时就去掉bpe符号(@@)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fairseq-generate $&#123;data_dir&#125;&#x2F;data-bin \</span><br><span class="line">    --path $&#123;model_dir&#125;&#x2F;checkpoints&#x2F;checkpoint_best.pt \</span><br><span class="line">    --batch-size 128 --beam 8 &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;bestbeam8.txt</span><br></pre></td></tr></table></figure>

<p>选取一部分结果展示如下 (<strong>S</strong>: 源句子，<strong>T</strong>: 目标句子，<strong>H/D</strong>: 预测的句子及其生成概率的log，句子质量越好，其生成概率越接近1，其log越接近0。<strong>P</strong>: 每一个词的生成概率的log。其中，H=\frac{\sum P}{n}<em>H</em>=<em>n</em>∑<em>P</em>)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S-537	西班牙 的 人权 困境</span><br><span class="line">T-537	Spain &amp;apos;s Human-Rights Dilemma</span><br><span class="line">H-537	-0.16863664984703064	Spain &amp;apos;s Human Rights Quandary</span><br><span class="line">D-537	-0.16863664984703064	Spain &amp;apos;s Human Rights Quandary</span><br><span class="line">P-537	-0.0973 -0.1385 -0.1464 -0.0123 -0.4252 -0.4299 -0.0110 -0.0884</span><br><span class="line"></span><br><span class="line">S-5516	这是 不可 接受 的 。</span><br><span class="line">T-5516	that is unacceptable .</span><br><span class="line">H-5516	-0.35840675234794617	this is unacceptable .</span><br><span class="line">D-5516	-0.35840675234794617	this is unacceptable .</span><br><span class="line">P-5516	-0.7625 -0.5517 -0.2005 -0.1513 -0.1261</span><br><span class="line"></span><br><span class="line">S-676	与 最初 版本 的 破产法 相 比较 ， 2006 年 的 法律 是 牢牢 扎根 于 市场经济 的 。</span><br><span class="line">T-676	compared with the original bankruptcy code , the 2006 code is firmly rooted in the needs of a market economy .</span><br><span class="line">H-676	-0.624997079372406	in contrast to the original bankruptcy law , the law of 2006 was firmly rooted in the market economy .</span><br><span class="line">D-676	-0.624997079372406	in contrast to the original bankruptcy law , the law of 2006 was firmly rooted in the market economy .</span><br><span class="line">P-676	-1.4995 -0.9434 -0.1292 -0.3479 -0.9758 -0.6600 -0.9037 -0.1836 -0.4983 -1.6406 -0.3142 -0.0344 -0.1685 -1.0289 -1.0286 -0.1917 -1.5369 -0.6586 -0.1119 -0.1333 -0.1361</span><br><span class="line"></span><br><span class="line">S-432	用 缅因州 共和党 参议员 苏珊 · 柯林斯 （ Susan Collins ） 的话 说 ， 政府 关门 对 其 缅因州 阿卡迪亚 国家 公园 （ Acadia National Park ） 周边 &quot; 所有 小企业 都 造成 了 伤害 &quot; ， &quot; 这是 完全 错误 的 。 &quot; 是 她 首先 提出 了 和解 协议 纲要 并 送交 参议院 。</span><br><span class="line">T-432	in the words of Senator Susan Collins , a Republican from Maine who first put together the outlines of a deal and took it to the Senate floor , the shutdown &quot; hurt all the small businesses &quot; around Acadia National Park in her home state , &quot; and that is plain wrong . &quot;</span><br><span class="line">H-432	-0.7003933787345886	in the words of Susan Collins , a Republican senator from Maine , it would be a mistake to shut down the government &amp;apos;s &quot; all small business &quot; around the Maine National Park , where she proposed a settlement and delivered it to the Senate .</span><br><span class="line">D-432	-0.7003933787345886	in the words of Susan Collins , a Republican senator from Maine , it would be a mistake to shut down the government &amp;apos;s &quot; all small business &quot; around the Maine National Park , where she proposed a settlement and delivered it to the Senate .</span><br><span class="line">P-432	-1.2762 -0.3546 -0.0142 -0.1261 -0.0058 -0.7617 -0.1695 -0.2992 -0.0777 -0.3016 -0.4818 -0.0061 -0.0308 -0.3509 -2.5533 -1.5254 -0.2761 -1.1667 -0.6169 -0.6285 -1.2463 -0.0973 -1.4414 -0.3324 -0.2302 -0.3312 -0.6847 -1.0005 -0.1812 -2.9048 -0.3072 -1.8045 -0.0473 -0.8421 -0.4715 -0.6841 -1.1902 -1.6192 -0.3370 -2.3317 -0.3701 -0.2508 -3.0284 -0.2336 -1.1318 -0.3904 -0.1124 -0.0262 -0.2203 -0.1480</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-交互式解码"><a href="#3-3-2-交互式解码" class="headerlink" title="3.3.2 交互式解码"></a>3.3.2 交互式解码</h3><p>使用<code>fairseq-interactive</code>命令进行交互式解码(<strong>用于文本文件</strong>)。注意其<code>input</code>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!fairseq-interactive $&#123;data_dir&#125;&#x2F;data-bin \</span><br><span class="line">    --input $&#123;data_dir&#125;&#x2F;test.zh \</span><br><span class="line">    --path $&#123;model_dir&#125;&#x2F;checkpoints&#x2F;checkpoint_best.pt \</span><br><span class="line">    --batch-size 1 --beam 8 --remove-bpe &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;bestbeam8.txt</span><br></pre></td></tr></table></figure>

<h2 id="3-4-后处理及评价"><a href="#3-4-后处理及评价" class="headerlink" title="3.4 后处理及评价"></a>3.4 后处理及评价</h2><h3 id="3-4-1-抽取译文"><a href="#3-4-1-抽取译文" class="headerlink" title="3.4.1 抽取译文"></a>3.4.1 抽取译文</h3><p>由于解码生成的文件包含大量无关信息，所以需要把<strong>译文</strong>和<strong>正确答案</strong>单独抽取出来，其中predict是译文，answer是正确答案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep ^H $&#123;data_dir&#125;&#x2F;result&#x2F;bestbeam8.txt | cut -f3- &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.true.bpe.en</span><br><span class="line">grep ^T $&#123;data_dir&#125;&#x2F;result&#x2F;bestbeam8.txt | cut -f2- &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.true.bpe.en</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># predict.tok.true.bpe.en</span><br><span class="line">the subsidy .</span><br><span class="line">this is unacceptable .</span><br><span class="line">there is even worse .</span><br><span class="line">this must change .</span><br><span class="line"></span><br><span class="line"># answer.tok.true.bpe.en</span><br><span class="line">removal of subsidies .</span><br><span class="line">that is unacceptable .</span><br><span class="line">it gets worse .</span><br><span class="line">this must change .</span><br></pre></td></tr></table></figure>

<h3 id="3-4-1-去除bpe符号"><a href="#3-4-1-去除bpe符号" class="headerlink" title="3.4.1 去除bpe符号"></a>3.4.1 去除bpe符号</h3><p>有两种方法可以去除bpe符号，第一种是在解码时添加<code>--remove-bpe</code>参数，第二种是使用<code>sed</code>指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -r &#39;s&#x2F;(@@ )| (@@ ?$)&#x2F;&#x2F;g&#39; &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.true.bpe.en  &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.true.en</span><br><span class="line">sed -r &#39;s&#x2F;(@@ )| (@@ ?$)&#x2F;&#x2F;g&#39; &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.true.bpe.en  &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.true.en</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># answer.tok.true.bpe.en</span><br><span class="line">a World of Under@@ investment</span><br><span class="line">that needs to change .</span><br><span class="line">revolts of the Righ@@ teous</span><br><span class="line">Russia &amp;apos;s Economic Imperi@@ alism</span><br><span class="line">shock and Pan@@ ic</span><br><span class="line"></span><br><span class="line"># answer.tok.true.en</span><br><span class="line">a World of Underinvestment</span><br><span class="line">that needs to change .</span><br><span class="line">revolts of the Righteous</span><br><span class="line">Russia &amp;apos;s Economic Imperialism</span><br><span class="line">shock and Panic</span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-detruecase"><a href="#3-4-2-detruecase" class="headerlink" title="3.4.2 detruecase"></a>3.4.2 detruecase</h3><p>需要使用detruecase.perl将文件中的大小写恢复正常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;DETC&#125; &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.true.en &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.en</span><br><span class="line">$&#123;DETC&#125; &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.true.en &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.en</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># predict.tok.true.en</span><br><span class="line">the subsidy .</span><br><span class="line">this is unacceptable .</span><br><span class="line">there is even worse .</span><br><span class="line">this must change .</span><br><span class="line"></span><br><span class="line"># predict.tok.en</span><br><span class="line">The subsidy .</span><br><span class="line">This is unacceptable .</span><br><span class="line">There is even worse .</span><br><span class="line">This must change .</span><br></pre></td></tr></table></figure>

<h3 id="3-4-3-评价"><a href="#3-4-3-评价" class="headerlink" title="3.4.3 评价"></a>3.4.3 评价</h3><p>1.<strong>multi-bleu</strong>：在detokenize前进行评价</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;MULTI_BLEU&#125; -lc $&#123;data_dir&#125;&#x2F;result&#x2F;answer.tok.en &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.en</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BLEU &#x3D; 28.81, 61.8&#x2F;35.4&#x2F;22.8&#x2F;15.2 (BP&#x3D;0.976, ratio&#x3D;0.977, hyp_len&#x3D;187605, ref_len&#x3D;192093)</span><br><span class="line">It is not advisable to publish scores from multi-bleu.perl.  The scores depend on your tokenizer, which is unlikely to be reproducible from your paper or consistent across research groups.  Instead you should detokenize then use mteval-v14.pl, which has a standard tokenization.  Scores from multi-bleu.perl can still be used for internal purposes when you have a consistent tokenizer.</span><br></pre></td></tr></table></figure>

<p>2.<strong>sacrebleu</strong>：在detokenize后进行评价。<a href="https://github.com/mjpost/sacreBLEU">link</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Option 1: Pass the reference file as a positional argument to sacreBLEU</span><br><span class="line">sacrebleu ref.detok.txt -i output.detok.txt -m bleu -b -w 4</span><br><span class="line">20.7965</span><br><span class="line"></span><br><span class="line"># Option 2: Redirect the system into STDIN (Compatible with multi-bleu.perl way of doing things)</span><br><span class="line">cat output.detok.txt | sacrebleu ref.detok.txt -m bleu -b -w 4</span><br><span class="line">20.7965</span><br></pre></td></tr></table></figure>

<p>3.<strong>mteval-v14</strong>：Usage: <code>$0 -r &lt;ref_file&gt; -s &lt;src_file&gt; -t &lt;tst_file&gt;</code></p>
<h3 id="3-4-4-detokenize"><a href="#3-4-4-detokenize" class="headerlink" title="3.4.4 detokenize"></a>3.4.4 detokenize</h3><p>最后一步，是使用detokenize.perl得到纯预测文本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;DETOKENIZER&#125; -l en &lt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.tok.en &gt; $&#123;data_dir&#125;&#x2F;result&#x2F;predict.en</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># predict.tok.en</span><br><span class="line">what &amp;apos;s wrong with protectionism ?</span><br><span class="line">The &quot; establishment &quot; and counterinsurgency strategy , introduced by President Barack Obama &amp;apos;s military surge in 2010 , was intended to reverse the war .</span><br><span class="line"></span><br><span class="line"># predict.en</span><br><span class="line">What&#39;s wrong with protectionism?</span><br><span class="line">The &quot;establishment&quot; and counterinsurgency strategy, introduced by President Barack Obama&#39;s military surge in 2010, was intended to reverse the war.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：</p>
<p> <a href="https://hannlp.github.io/2021-01-16-Use-fairseq-to-train-a-Chinese-English-translation-model-from-scratch/">https://hannlp.github.io/2021-01-16-Use-fairseq-to-train-a-Chinese-English-translation-model-from-scratch/</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/194176917">https://zhuanlan.zhihu.com/p/194176917</a></p>
</blockquote>
]]></content>
      <categories>
        <category>research</category>
        <category>NMT</category>
      </categories>
  </entry>
</search>
